@startuml

abstract class AbstractApplicationContext
abstract class AbstractRefreshableApplicationContext
abstract class AbstractAutowireCapableBeanFactory
abstract class AbstractBeanDefinitionReader
abstract class AbstractBeanFactory
abstract class AbstractEnvironment
abstract class AbstractFileResolvingResource
abstract class AbstractResource
abstract class NamespaceHandlerSupport

interface BeanDefinitionRegistry
interface ConfigurableEnvironment
interface BeanDefinitionReader
interface EnvironmentCapable
interface ResourceLoader
interface EntityResolver
interface Resource
interface DocumentLoader
interface NamespaceHandler
interface BeanDefinitionParser

class DefaultListableBeanFactory
class PathMatchingResourcePatternResolver
class XmlBeanDefinitionReader
class StandardEnvironment
class DefaultResourceLoader
class DelegatingEntityResolver
class ResourceEntityResolver
class BeansDtdResolver
class PluggableSchemaResolver
class ClassPathResource
class DefaultDocumentLoader
class DubboBeanDefinitionParser

BeanDefinitionParser <|-- DubboBeanDefinitionParser
NamespaceHandler <|-- NamespaceHandlerSupport
DocumentLoader <|-- DefaultDocumentLoader
Resource <|-- AbstractResource
AbstractResource <|-- AbstractFileResolvingResource
AbstractFileResolvingResource <|-- ClassPathResource
EntityResolver <|-- PluggableSchemaResolver
EntityResolver <|-- BeansDtdResolver
EntityResolver <|-- DelegatingEntityResolver
DelegatingEntityResolver <|-- ResourceEntityResolver
ResourceLoader <|-- DefaultResourceLoader
EnvironmentCapable <|-- AbstractBeanDefinitionReader
BeanDefinitionReader <|-- AbstractBeanDefinitionReader
AbstractBeanDefinitionReader <|-- StandardEnvironment
ConfigurableEnvironment <|-- AbstractEnvironment
AbstractEnvironment <|-- StandardEnvironment
AbstractApplicationContext <|-- AbstractRefreshableApplicationContext
AbstractBeanFactory <|-- AbstractAutowireCapableBeanFactory
BeanDefinitionRegistry <|-- DefaultListableBeanFactory


class DubboBeanDefinitionParser{
public BeanDefinition parse(Element element, ParserContext parserContext)
}
class DefaultDocumentLoader{
protected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)
}
class ClassPathResource{
private final String path
private ClassLoader classLoader
}
class DefaultResourceLoader{
public Resource getResource(String location)
}
class PluggableSchemaResolver{
private final ClassLoader classLoader
private final String schemaMappingsLocation = "META-INF/spring.schemas"
}
class DelegatingEntityResolver{
private final EntityResolver dtdResolver
private final EntityResolver schemaResolver
}
class XmlBeanDefinitionReader{
private EntityResolver entityResolver
private boolean namespaceAware = false
private int validationMode = VALIDATION_AUTO
private final ThreadLocal<Set<EncodedResource>> resourcesCurrentlyBeingLoaded
private DocumentLoader documentLoader = new DefaultDocumentLoader()
public XmlBeanDefinitionReader(BeanDefinitionRegistry registry)
int loadBeanDefinitions(Resource resource)  - 6
loadBeanDefinitions().importBeanDefinitionResource()  -  7
}
class PathMatchingResourcePatternResolver{
private final ResourceLoader resourceLoader = new DefaultResourceLoader()
public Resource[] getResources(String locationPattern)  -  5
}
abstract class NamespaceHandlerSupport {
public BeanDefinition parse(Element element, ParserContext parserContext)   -   8
}
abstract class AbstractBeanFactory {
setParentBeanFactory(BeanFactory parentBeanFactory)
}

abstract class AbstractBeanDefinitionReader {
private ResourceLoader resourceLoader
private Environment environment
public int loadBeanDefinitions(String... locations)
}
abstract class AbstractApplicationContext {

}

abstract class AbstractRefreshableApplicationContext {
refreshBeanFactory() - 1
DefaultListableBeanFactory createBeanFactory() - 2
loadBeanDefinitions(DefaultListableBeanFactory beanFactory) - 3
loadBeanDefinitions().loadBeanDefinitions() - 4
}

@enduml